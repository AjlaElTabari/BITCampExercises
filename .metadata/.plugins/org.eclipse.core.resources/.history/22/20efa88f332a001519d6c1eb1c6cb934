package task2;

import java.util.EmptyStackException;

/**
 * Represents a stack of String objects using linked lists Implements few
 * standard methods for stack manipulation
 * 
 * @author ajla.eltabari
 *
 */
public class StringStackLinkedLists {
	private Node head;

	/**
	 * Empty constructor Initialize head node to null (stack is empty)
	 */
	public StringStackLinkedLists() {
		head = null;
	}

	/**
	 * Checks if an head node is null (if stack is empty)
	 * 
	 * @returns true if an array is empty, and false if it is not
	 */
	public boolean empty() {
		return head == null;
	}

	/**
	 * Inserts new value at the end of the list
	 * 
	 * @param value
	 *            that needs to be added
	 * @returns added value
	 */
	public String push(String value) {
		if (head == null) {
			head = new Node(value);
		} else {
			Node tmp = new Node(value);
			tmp.setNext(head);
			head = tmp;
		}
		return value;
	}
	
	/**
	 * Returns last value on the stack
	 * 
	 * @return
	 * @throws EmptyStackException
	 *             in case that stack is empty
	 */
	public String peek() {
		return head.getValue();
	}

	/**
	 * Deletes last value from the stack
	 * 
	 * @returns deleted value
	 * @throws EmptyStackException
	 *             in case that stack is empty
	 */
	public String pop() {
		if (head == null) {
			throw new EmptyStackException();
		}

		String tmp = head.getValue();
		head = head.getNext();
		return tmp;
	}

	/**
	 * Prints out head node value
	 */
	public String toString() {
		if (head == null) {
			return "Stack is empty!";
		} else {
			return head.toString();
		}
	}

	private class Node {

		private String value;
		private Node next;

		public Node(String value) {
			this.value = value;
			next = null;
		}

		/**
		 * @return the value
		 */
		public String getValue() {
			return value;
		}

		/**
		 * @return the next
		 */
		public Node getNext() {
			return next;
		}

		/**
		 * @param next
		 *            the next to set
		 */
		public void setNext(Node next) {
			this.next = next;
		}

		public String toString() {
			if (next == null) {
				return value + "";
			}
			return value + " " + next.toString();
		}

	}

}
